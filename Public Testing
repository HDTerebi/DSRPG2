
--[[
AztupBrew(Fork of IronBrew2): obfuscation; Version 2.7.2
]]
return(function(Testing_i,Testing_n,Testing_r)local Testing_l=string.char;local Testing_j=string.sub;local Testing_m=table.concat;local Testing_k=math.ldexp;local Testing_s=getfenv or function()return _ENV end;local Testing_q=select;local Testing_f=unpack or table.unpack;local Testing_a=tonumber;local Testing_glocal Testing_a=(bit or bit32);local Testing_d=Testing_a and Testing_a.bxor or function(Testing_a,Testing_b)local Testing_c,Testing_d,Testing_e=1,0,10 while Testing_a>0 and Testing_b>0 do local Testing_f,Testing_e=Testing_a%2,Testing_b%2 if Testing_f~=Testing_e then Testing_d=Testing_d+Testing_c end Testing_a,Testing_b,Testing_c=(Testing_a-Testing_f)/2,(Testing_b-Testing_e)/2,Testing_c*2 end if Testing_a<Testing_b then Testing_a=Testing_b end while Testing_a>0 do local Testing_b=Testing_a%2 if Testing_b>0 then Testing_d=Testing_d+Testing_c end Testing_a,Testing_c=(Testing_a-Testing_b)/2,Testing_c*2 end return Testing_d end local function Testing_c(Testing_c,Testing_a,Testing_b)if Testing_b then local Testing_a=(Testing_c/2^(Testing_a-1))%2^((Testing_b-1)-(Testing_a-1)+1);return Testing_a-Testing_a%1;else local Testing_a=2^(Testing_a-1);return(Testing_c%(Testing_a+Testing_a)>=Testing_a)and 1 or 0;end;end;local Testing_a=1;local function Testing_b()local Testing_f,Testing_e,Testing_c,Testing_b=Testing_i(Testing_g,Testing_a,Testing_a+3);Testing_f=Testing_d(Testing_f,59)Testing_e=Testing_d(Testing_e,59)Testing_c=Testing_d(Testing_c,59)Testing_b=Testing_d(Testing_b,59)Testing_a=Testing_a+4;return(Testing_b*16777216)+(Testing_c*65536)+(Testing_e*256)+Testing_f;end;local function Testing_h()local Testing_b=Testing_d(Testing_i(Testing_g,Testing_a,Testing_a),59);Testing_a=Testing_a+1;return Testing_b;end;local function Testing_e()local Testing_c,Testing_b=Testing_i(Testing_g,Testing_a,Testing_a+2);Testing_c=Testing_d(Testing_c,59)Testing_b=Testing_d(Testing_b,59)Testing_a=Testing_a+2;return(Testing_b*256)+Testing_c;end;local function Testing_t()local Testing_d=Testing_b();local Testing_a=Testing_b();local Testing_e=1;local Testing_d=(Testing_c(Testing_a,1,20)*(2^32))+Testing_d;local Testing_b=Testing_c(Testing_a,21,31);local Testing_a=((-1)^Testing_c(Testing_a,32));if(Testing_b==0)then if(Testing_d==0)then return Testing_a*0;else Testing_b=1;Testing_e=0;end;elseif(Testing_b==2047)then return(Testing_d==0)and(Testing_a*(1/0))or(Testing_a*(0/0));end;return Testing_k(Testing_a,Testing_b-1023)*(Testing_e+(Testing_d/(2^52)));end;local Testing_k=Testing_b;local function Testing_o(Testing_b)local Testing_c;if(not Testing_b)then Testing_b=Testing_k();if(Testing_b==0)then return'';end;end;Testing_c=Testing_j(Testing_g,Testing_a,Testing_a+Testing_b-1);Testing_a=Testing_a+Testing_b;local Testing_b={}for Testing_a=1,#Testing_c do Testing_b[Testing_a]=Testing_l(Testing_d(Testing_i(Testing_j(Testing_c,Testing_a,Testing_a)),59))end return Testing_m(Testing_b);end;local Testing_a=Testing_b;local function Testing_p(...)return{...},Testing_q('#',...)end local function Testing_m()local Testing_k={};local Testing_j={};local Testing_a={};local Testing_i={[#{{632;815;449;67};"1 + 1 = 111";}]=Testing_j,[#{{572;837;661;108};{85;432;762;412};"1 + 1 = 111";}]=nil,[#{{7;947;605;809};"1 + 1 = 111";{87;612;624;880};"1 + 1 = 111";}]=Testing_a,[#{"1 + 1 = 111";}]=Testing_k,};local Testing_a=Testing_b()local Testing_f={}for Testing_c=1,Testing_a do local Testing_b=Testing_h();local Testing_a;if(Testing_b==1)then Testing_a=(Testing_h()~=0);elseif(Testing_b==0)then Testing_a=Testing_t();elseif(Testing_b==2)then Testing_a=Testing_o();end;Testing_f[Testing_c]=Testing_a;end;for Testing_i=1,Testing_b()do local Testing_a=Testing_h();if(Testing_c(Testing_a,1,1)==0)then local Testing_d=Testing_c(Testing_a,2,3);local Testing_g=Testing_c(Testing_a,4,6);local Testing_a={Testing_e(),Testing_e(),nil,nil};if(Testing_d==0)then Testing_a[3]=Testing_e();Testing_a[4]=Testing_e();elseif(Testing_d==1)then Testing_a[3]=Testing_b();elseif(Testing_d==2)then Testing_a[3]=Testing_b()-(2^16)elseif(Testing_d==3)then Testing_a[3]=Testing_b()-(2^16)Testing_a[4]=Testing_e();end;if(Testing_c(Testing_g,1,1)==1)then Testing_a[2]=Testing_f[Testing_a[2]]end if(Testing_c(Testing_g,2,2)==1)then Testing_a[3]=Testing_f[Testing_a[3]]end if(Testing_c(Testing_g,3,3)==1)then Testing_a[4]=Testing_f[Testing_a[4]]end Testing_k[Testing_i]=Testing_a;end end;for Testing_a=1,Testing_b()do Testing_j[Testing_a-1]=Testing_m();end;Testing_i[3]=Testing_h();return Testing_i;end;local function Testing_l(Testing_a,Testing_i,Testing_e)Testing_a=(Testing_a==true and Testing_m())or Testing_a;return(function(...)local Testing_d=Testing_a[1];local Testing_g=Testing_a[3];local Testing_o=Testing_a[2];local Testing_j=Testing_p local Testing_b=1;local Testing_h=-1;local Testing_m={};local Testing_p={...};local Testing_q=Testing_q('#',...)-1;local Testing_k={};local Testing_c={};for Testing_a=0,Testing_q do if(Testing_a>=Testing_g)then Testing_m[Testing_a-Testing_g]=Testing_p[Testing_a+1];else Testing_c[Testing_a]=Testing_p[Testing_a+#{"1 + 1 = 111";}];end;end;local Testing_p=Testing_q-Testing_g+1 local Testing_a;local Testing_g;while true do Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[1];if Testing_g<=164 then if Testing_g<=81 then if Testing_g<=40 then if Testing_g<=19 then if Testing_g<=9 then if Testing_g<=4 then if Testing_g<=1 then if Testing_g==0 then local Testing_i;local Testing_m,Testing_l;local Testing_k;local Testing_g;Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_k=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_k;Testing_c[Testing_g]=Testing_k[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_m,Testing_l=Testing_j(Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3])))Testing_h=Testing_l+Testing_g-1 Testing_i=0;for Testing_a=Testing_g,Testing_h do Testing_i=Testing_i+1;Testing_c[Testing_a]=Testing_m[Testing_i];end;Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_h))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]();Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_b=Testing_a[3];else local Testing_h;local Testing_g;Testing_c[Testing_a[2]]();Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=(Testing_a[3]~=0);Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e[Testing_a[3]]=Testing_c[Testing_a[2]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e[Testing_a[3]]=Testing_c[Testing_a[2]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];if Testing_c[Testing_a[2]]then Testing_b=Testing_b+1;else Testing_b=Testing_a[3];end;end;elseif Testing_g<=2 then Testing_c[Testing_a[2]][Testing_a[3]]=Testing_a[4];elseif Testing_g>3 then local Testing_g;local Testing_e;Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e]=Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))else Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]]-Testing_c[Testing_a[4]];end;elseif Testing_g<=6 then if Testing_g==5 then local Testing_h;local Testing_g;Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g](Testing_c[Testing_g+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g](Testing_c[Testing_g+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g](Testing_c[Testing_g+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_b=Testing_a[3];else local Testing_g;local Testing_f;Testing_f=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_f+1]=Testing_g;Testing_c[Testing_f]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2]Testing_c[Testing_f](Testing_c[Testing_f+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_i[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_f+1]=Testing_g;Testing_c[Testing_f]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2]Testing_c[Testing_f](Testing_c[Testing_f+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_f+1]=Testing_g;Testing_c[Testing_f]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2]Testing_c[Testing_f](Testing_c[Testing_f+1])end;elseif Testing_g<=7 then local Testing_g;local Testing_e;Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e]=Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];elseif Testing_g==8 then local Testing_a=Testing_a[2];Testing_h=Testing_a+Testing_p-1;for Testing_b=Testing_a,Testing_h do local Testing_a=Testing_m[Testing_b-Testing_a];Testing_c[Testing_b]=Testing_a;end;else local Testing_h;local Testing_e;local Testing_g;Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[3];Testing_e=Testing_c[Testing_g]for Testing_a=Testing_g+1,Testing_a[4]do Testing_e=Testing_e..Testing_c[Testing_a];end;Testing_c[Testing_a[2]]=Testing_e;Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_h=Testing_a[2]Testing_c[Testing_h](Testing_f(Testing_c,Testing_h+1,Testing_a[3]))end;elseif Testing_g<=14 then if Testing_g<=11 then if Testing_g>10 then local Testing_h;local Testing_g;Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]]-Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]]/Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e[Testing_a[3]]=Testing_c[Testing_a[2]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e[Testing_a[3]]=Testing_c[Testing_a[2]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]={};Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_c[Testing_g+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]]*Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_a[3]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e[Testing_a[3]]=Testing_c[Testing_a[2]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g](Testing_c[Testing_g+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=(Testing_a[3]~=0);Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_a[3]]=Testing_a[4];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];else local Testing_a=Testing_a[2]Testing_c[Testing_a]=Testing_c[Testing_a](Testing_f(Testing_c,Testing_a+1,Testing_h))end;elseif Testing_g<=12 then local Testing_h;local Testing_g;Testing_c[Testing_a[2]]=Testing_i[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_c[Testing_g+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]]*Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_a[3]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];elseif Testing_g==13 then local Testing_h;local Testing_g;Testing_g=Testing_a[2]Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]={};Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];else local Testing_g;local Testing_e;Testing_e=Testing_a[2]Testing_c[Testing_e]=Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];end;elseif Testing_g<=16 then if Testing_g>15 then local Testing_f;Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_i[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]]/Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2]Testing_c[Testing_f](Testing_c[Testing_f+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=(Testing_a[3]~=0);Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_i[Testing_a[3]]=Testing_c[Testing_a[2]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];do return end;else local Testing_h;local Testing_g;Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e[Testing_a[3]]=Testing_c[Testing_a[2]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];do return end;end;elseif Testing_g<=17 then local Testing_h;local Testing_g;Testing_c[Testing_a[2]][Testing_a[3]]=Testing_a[4];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=(Testing_a[3]~=0);Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e[Testing_a[3]]=Testing_c[Testing_a[2]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e[Testing_a[3]]=Testing_c[Testing_a[2]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e[Testing_a[3]]=Testing_c[Testing_a[2]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];if Testing_c[Testing_a[2]]then Testing_b=Testing_b+1;else Testing_b=Testing_a[3];end;elseif Testing_g==18 then local Testing_g;local Testing_i;local Testing_k,Testing_m;local Testing_l;local Testing_g;Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_l=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_l;Testing_c[Testing_g]=Testing_l[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_k,Testing_m=Testing_j(Testing_c[Testing_g](Testing_c[Testing_g+1]))Testing_h=Testing_m+Testing_g-1 Testing_i=0;for Testing_a=Testing_g,Testing_h do Testing_i=Testing_i+1;Testing_c[Testing_a]=Testing_k[Testing_i];end;Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_k={Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_h))};Testing_i=0;for Testing_a=Testing_g,Testing_a[4]do Testing_i=Testing_i+1;Testing_c[Testing_a]=Testing_k[Testing_i];end Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_b=Testing_a[3];else Testing_c[Testing_a[2]][Testing_a[3]]=Testing_c[Testing_a[4]];end;elseif Testing_g<=29 then if Testing_g<=24 then if Testing_g<=21 then if Testing_g==20 then local Testing_b=Testing_a[2];local Testing_d=Testing_c[Testing_a[3]];Testing_c[Testing_b+1]=Testing_d;Testing_c[Testing_b]=Testing_d[Testing_c[Testing_a[4]]];else local Testing_b=Testing_a[2]local Testing_e={Testing_c[Testing_b](Testing_f(Testing_c,Testing_b+1,Testing_h))};local Testing_d=0;for Testing_a=Testing_b,Testing_a[4]do Testing_d=Testing_d+1;Testing_c[Testing_a]=Testing_e[Testing_d];end end;elseif Testing_g<=22 then local Testing_h;local Testing_g;Testing_c[Testing_a[2]]();Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];elseif Testing_g==23 then local Testing_b=Testing_a[2];local Testing_d=Testing_c[Testing_b];for Testing_a=Testing_b+1,Testing_a[3]do Testing_n(Testing_d,Testing_c[Testing_a])end;else local Testing_h;local Testing_g;Testing_c[Testing_a[2]]();Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=(Testing_a[3]~=0);Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e[Testing_a[3]]=Testing_c[Testing_a[2]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e[Testing_a[3]]=Testing_c[Testing_a[2]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];if Testing_c[Testing_a[2]]then Testing_b=Testing_b+1;else Testing_b=Testing_a[3];end;end;elseif Testing_g<=26 then if Testing_g==25 then Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];else local Testing_g;Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_i[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_c[Testing_g+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_i[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]]*Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_a[3]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_b=Testing_a[3];end;elseif Testing_g<=27 then local Testing_h;local Testing_g;Testing_c[Testing_a[2]]();Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];elseif Testing_g==28 then local Testing_b=Testing_a[2]local Testing_d,Testing_a=Testing_j(Testing_c[Testing_b]())Testing_h=Testing_a+Testing_b-1 local Testing_a=0;for Testing_b=Testing_b,Testing_h do Testing_a=Testing_a+1;Testing_c[Testing_b]=Testing_d[Testing_a];end;else Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];end;elseif Testing_g<=34 then if Testing_g<=31 then if Testing_g>30 then Testing_e[Testing_a[3]]=Testing_c[Testing_a[2]];else local Testing_h=Testing_o[Testing_a[3]];local Testing_g;local Testing_f={};Testing_g=Testing_r({},{__index=function(Testing_b,Testing_a)local Testing_a=Testing_f[Testing_a];return Testing_a[1][Testing_a[2]];end,__newindex=function(Testing_c,Testing_a,Testing_b)local Testing_a=Testing_f[Testing_a]Testing_a[1][Testing_a[2]]=Testing_b;end;});for Testing_e=1,Testing_a[4]do Testing_b=Testing_b+1;local Testing_a=Testing_d[Testing_b];if Testing_a[1]==171 then Testing_f[Testing_e-1]={Testing_c,Testing_a[3]};else Testing_f[Testing_e-1]={Testing_i,Testing_a[3]};end;Testing_k[#Testing_k+1]=Testing_f;end;Testing_c[Testing_a[2]]=Testing_l(Testing_h,Testing_g,Testing_e);end;elseif Testing_g<=32 then Testing_b=Testing_a[3];elseif Testing_g>33 then Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];else local Testing_b=Testing_a[2];local Testing_d=Testing_c[Testing_a[3]];Testing_c[Testing_b+1]=Testing_d;Testing_c[Testing_b]=Testing_d[Testing_a[4]];end;elseif Testing_g<=37 then if Testing_g<=35 then local Testing_g;local Testing_f;Testing_f=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_f+1]=Testing_g;Testing_c[Testing_f]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2]Testing_c[Testing_f](Testing_c[Testing_f+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_f+1]=Testing_g;Testing_c[Testing_f]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2]Testing_c[Testing_f](Testing_c[Testing_f+1])elseif Testing_g>36 then local Testing_d=Testing_a[2];local Testing_b=Testing_c[Testing_a[3]];Testing_c[Testing_d+1]=Testing_b;Testing_c[Testing_d]=Testing_b[Testing_c[Testing_a[4]]];else local Testing_a=Testing_a[2]local Testing_d,Testing_b=Testing_j(Testing_c[Testing_a](Testing_c[Testing_a+1]))Testing_h=Testing_b+Testing_a-1 local Testing_b=0;for Testing_a=Testing_a,Testing_h do Testing_b=Testing_b+1;Testing_c[Testing_a]=Testing_d[Testing_b];end;end;elseif Testing_g<=38 then local Testing_d=Testing_a[2];local Testing_f=Testing_c[Testing_d+2];local Testing_e=Testing_c[Testing_d]+Testing_f;Testing_c[Testing_d]=Testing_e;if(Testing_f>0)then if(Testing_e<=Testing_c[Testing_d+1])then Testing_b=Testing_a[3];Testing_c[Testing_d+3]=Testing_e;end elseif(Testing_e>=Testing_c[Testing_d+1])then Testing_b=Testing_a[3];Testing_c[Testing_d+3]=Testing_e;end elseif Testing_g==39 then local Testing_k;local Testing_m,Testing_l;local Testing_i;local Testing_g;Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_i=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_i;Testing_c[Testing_g]=Testing_i[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_i=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_i;Testing_c[Testing_g]=Testing_i[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_m,Testing_l=Testing_j(Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3])))Testing_h=Testing_l+Testing_g-1 Testing_k=0;for Testing_a=Testing_g,Testing_h do Testing_k=Testing_k+1;Testing_c[Testing_a]=Testing_m[Testing_k];end;Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_h))else local Testing_h;local Testing_g;Testing_c[Testing_a[2]]();Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]]-Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]]/Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e[Testing_a[3]]=Testing_c[Testing_a[2]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e[Testing_a[3]]=Testing_c[Testing_a[2]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]={};Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]]*Testing_a[4];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]]+Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_a[3]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e[Testing_a[3]]=Testing_c[Testing_a[2]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g](Testing_c[Testing_g+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=(Testing_a[3]~=0);Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_a[3]]=Testing_a[4];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];end;elseif Testing_g<=60 then if Testing_g<=50 then if Testing_g<=45 then if Testing_g<=42 then if Testing_g==41 then local Testing_g;local Testing_i;local Testing_k,Testing_m;local Testing_l;local Testing_g;Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_l=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_l;Testing_c[Testing_g]=Testing_l[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_k,Testing_m=Testing_j(Testing_c[Testing_g](Testing_c[Testing_g+1]))Testing_h=Testing_m+Testing_g-1 Testing_i=0;for Testing_a=Testing_g,Testing_h do Testing_i=Testing_i+1;Testing_c[Testing_a]=Testing_k[Testing_i];end;Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_k={Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_h))};Testing_i=0;for Testing_a=Testing_g,Testing_a[4]do Testing_i=Testing_i+1;Testing_c[Testing_a]=Testing_k[Testing_i];end Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_b=Testing_a[3];else local Testing_f;Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_i[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]]/Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2]Testing_c[Testing_f](Testing_c[Testing_f+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=(Testing_a[3]~=0);Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_i[Testing_a[3]]=Testing_c[Testing_a[2]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];do return end;end;elseif Testing_g<=43 then local Testing_e;local Testing_h;local Testing_g;Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[3];Testing_h=Testing_c[Testing_g]for Testing_a=Testing_g+1,Testing_a[4]do Testing_h=Testing_h..Testing_c[Testing_a];end;Testing_c[Testing_a[2]]=Testing_h;Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];elseif Testing_g>44 then local Testing_b=Testing_a[2]local Testing_d,Testing_a=Testing_j(Testing_c[Testing_b]())Testing_h=Testing_a+Testing_b-1 local Testing_a=0;for Testing_b=Testing_b,Testing_h do Testing_a=Testing_a+1;Testing_c[Testing_b]=Testing_d[Testing_a];end;else local Testing_h;local Testing_g;Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]={};Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_a[3]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_a[3]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_a[3]]=Testing_c[Testing_a[4]];end;elseif Testing_g<=47 then if Testing_g>46 then local Testing_d=Testing_a[3];local Testing_b=Testing_c[Testing_d]for Testing_a=Testing_d+1,Testing_a[4]do Testing_b=Testing_b..Testing_c[Testing_a];end;Testing_c[Testing_a[2]]=Testing_b;else local Testing_d=Testing_a[2];local Testing_b=Testing_c[Testing_a[3]];Testing_c[Testing_d+1]=Testing_b;Testing_c[Testing_d]=Testing_b[Testing_a[4]];end;elseif Testing_g<=48 then if not Testing_c[Testing_a[2]]then Testing_b=Testing_b+1;else Testing_b=Testing_a[3];end;elseif Testing_g>49 then local Testing_e;local Testing_f;Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2];Testing_e=Testing_c[Testing_a[3]];Testing_c[Testing_f+1]=Testing_e;Testing_c[Testing_f]=Testing_e[Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]={};Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_c[Testing_a[3]]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_a[3]]=Testing_c[Testing_a[4]];else local Testing_h;local Testing_j;local Testing_i;local Testing_g;Testing_g=Testing_a[2]Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]={};Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e[Testing_a[3]]=Testing_c[Testing_a[2]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_i=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_i;Testing_c[Testing_g]=Testing_i[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_j={Testing_c[Testing_g](Testing_c[Testing_g+1])};Testing_h=0;for Testing_a=Testing_g,Testing_a[4]do Testing_h=Testing_h+1;Testing_c[Testing_a]=Testing_j[Testing_h];end Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_b=Testing_a[3];end;elseif Testing_g<=55 then if Testing_g<=52 then if Testing_g==51 then Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]]-Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];if(Testing_c[Testing_a[2]]<Testing_c[Testing_a[4]])then Testing_b=Testing_b+1;else Testing_b=Testing_a[3];end;else local Testing_g;local Testing_e;Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];end;elseif Testing_g<=53 then local Testing_h;local Testing_g;Testing_c[Testing_a[2]]=Testing_i[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];do return end;elseif Testing_g==54 then local Testing_g;local Testing_e;Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e]=Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];else local Testing_g;local Testing_e;Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))end;elseif Testing_g<=57 then if Testing_g>56 then local Testing_d=Testing_a[3];local Testing_b=Testing_c[Testing_d]for Testing_a=Testing_d+1,Testing_a[4]do Testing_b=Testing_b..Testing_c[Testing_a];end;Testing_c[Testing_a[2]]=Testing_b;else local Testing_i;local Testing_h;local Testing_g;Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_c[Testing_g+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_h=Testing_a[3];Testing_i=Testing_c[Testing_h]for Testing_a=Testing_h+1,Testing_a[4]do Testing_i=Testing_i..Testing_c[Testing_a];end;Testing_c[Testing_a[2]]=Testing_i;Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_a[3]]=Testing_c[Testing_a[4]];end;elseif Testing_g<=58 then local Testing_g;local Testing_e;Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))elseif Testing_g>59 then local Testing_g;local Testing_e;Testing_e=Testing_a[2]Testing_c[Testing_e]=Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];else local Testing_g;local Testing_f;Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_a[3]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_f+1]=Testing_g;Testing_c[Testing_f]=Testing_g[Testing_a[4]];end;elseif Testing_g<=70 then if Testing_g<=65 then if Testing_g<=62 then if Testing_g==61 then local Testing_g;Testing_g=Testing_a[2]Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];else local Testing_f;Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2]Testing_c[Testing_f](Testing_c[Testing_f+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_c[Testing_a[3]]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2]Testing_c[Testing_f](Testing_c[Testing_f+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];end;elseif Testing_g<=63 then local Testing_h;local Testing_g;Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_a[3]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_a[3]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_a[3]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_a[3]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_a[3]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_a[3]]=Testing_c[Testing_a[4]];elseif Testing_g>64 then local Testing_a=Testing_a[2]Testing_c[Testing_a]=Testing_c[Testing_a]()else local Testing_a=Testing_a[2]Testing_c[Testing_a]=Testing_c[Testing_a](Testing_c[Testing_a+1])end;elseif Testing_g<=67 then if Testing_g>66 then local Testing_g;local Testing_f;Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_f+1]=Testing_g;Testing_c[Testing_f]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2]Testing_c[Testing_f](Testing_c[Testing_f+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_i[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_f+1]=Testing_g;Testing_c[Testing_f]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2]Testing_c[Testing_f](Testing_c[Testing_f+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_f+1]=Testing_g;Testing_c[Testing_f]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2]Testing_c[Testing_f](Testing_c[Testing_f+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];do return end;else local Testing_g;Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_i[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_c[Testing_g+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_i[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]]*Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_a[3]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_b=Testing_a[3];end;elseif Testing_g<=68 then local Testing_g;local Testing_e;Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];elseif Testing_g>69 then local Testing_g;local Testing_e;Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];else Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];end;elseif Testing_g<=75 then if Testing_g<=72 then if Testing_g>71 then local Testing_a=Testing_a[2];do return Testing_c[Testing_a](Testing_f(Testing_c,Testing_a+1,Testing_h))end;else if(Testing_c[Testing_a[2]]~=Testing_a[4])then Testing_b=Testing_b+1;else Testing_b=Testing_a[3];end;end;elseif Testing_g<=73 then local Testing_g;local Testing_e;Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_a[3]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_a[3]]=Testing_a[4];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e]=Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e]=Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];elseif Testing_g==74 then local Testing_g;local Testing_i;local Testing_l,Testing_m;local Testing_k;local Testing_g;Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_k=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_k;Testing_c[Testing_g]=Testing_k[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_k=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_k;Testing_c[Testing_g]=Testing_k[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_l,Testing_m=Testing_j(Testing_c[Testing_g](Testing_c[Testing_g+1]))Testing_h=Testing_m+Testing_g-1 Testing_i=0;for Testing_a=Testing_g,Testing_h do Testing_i=Testing_i+1;Testing_c[Testing_a]=Testing_l[Testing_i];end;Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_l={Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_h))};Testing_i=0;for Testing_a=Testing_g,Testing_a[4]do Testing_i=Testing_i+1;Testing_c[Testing_a]=Testing_l[Testing_i];end Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_b=Testing_a[3];else Testing_c[Testing_a[2]]={};Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_c[Testing_a[3]]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=(Testing_a[3]~=0);Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_c[Testing_a[3]]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_c[Testing_a[3]]]=Testing_c[Testing_a[4]];end;elseif Testing_g<=78 then if Testing_g<=76 then local Testing_h;local Testing_g;Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_a[3]]=Testing_a[4];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g](Testing_c[Testing_g+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];elseif Testing_g>77 then local Testing_a=Testing_a[2];do return Testing_f(Testing_c,Testing_a,Testing_h)end;else Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];end;elseif Testing_g<=79 then Testing_c[Testing_a[2]]=Testing_a[3];elseif Testing_g>80 then local Testing_b=Testing_a[2]local Testing_e={Testing_c[Testing_b](Testing_f(Testing_c,Testing_b+1,Testing_h))};local Testing_d=0;for Testing_a=Testing_b,Testing_a[4]do Testing_d=Testing_d+1;Testing_c[Testing_a]=Testing_e[Testing_d];end else if(Testing_c[Testing_a[2]]==Testing_c[Testing_a[4]])then Testing_b=Testing_b+1;else Testing_b=Testing_a[3];end;end;elseif Testing_g<=122 then if Testing_g<=101 then if Testing_g<=91 then if Testing_g<=86 then if Testing_g<=83 then if Testing_g>82 then local Testing_k;local Testing_m,Testing_l;local Testing_i;local Testing_g;Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_i=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_i;Testing_c[Testing_g]=Testing_i[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_i=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_i;Testing_c[Testing_g]=Testing_i[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_m,Testing_l=Testing_j(Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3])))Testing_h=Testing_l+Testing_g-1 Testing_k=0;for Testing_a=Testing_g,Testing_h do Testing_k=Testing_k+1;Testing_c[Testing_a]=Testing_m[Testing_k];end;Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_h))else local Testing_d=Testing_a[2];local Testing_f=Testing_c[Testing_d+2];local Testing_e=Testing_c[Testing_d]+Testing_f;Testing_c[Testing_d]=Testing_e;if(Testing_f>0)then if(Testing_e<=Testing_c[Testing_d+1])then Testing_b=Testing_a[3];Testing_c[Testing_d+3]=Testing_e;end elseif(Testing_e>=Testing_c[Testing_d+1])then Testing_b=Testing_a[3];Testing_c[Testing_d+3]=Testing_e;end end;elseif Testing_g<=84 then local Testing_e;local Testing_g;local Testing_i,Testing_l;local Testing_k;local Testing_e;Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_k=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_k;Testing_c[Testing_e]=Testing_k[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_i,Testing_l=Testing_j(Testing_c[Testing_e](Testing_c[Testing_e+1]))Testing_h=Testing_l+Testing_e-1 Testing_g=0;for Testing_a=Testing_e,Testing_h do Testing_g=Testing_g+1;Testing_c[Testing_a]=Testing_i[Testing_g];end;Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_i={Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_h))};Testing_g=0;for Testing_a=Testing_e,Testing_a[4]do Testing_g=Testing_g+1;Testing_c[Testing_a]=Testing_i[Testing_g];end Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_b=Testing_a[3];elseif Testing_g==85 then local Testing_h;local Testing_g;Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g](Testing_c[Testing_g+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g](Testing_c[Testing_g+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g](Testing_c[Testing_g+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_b=Testing_a[3];else local Testing_h;local Testing_g;Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_b=Testing_a[3];end;elseif Testing_g<=88 then if Testing_g==87 then local Testing_h;local Testing_g;Testing_g=Testing_a[2]Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];else local Testing_k;local Testing_m,Testing_l;local Testing_i;local Testing_g;Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_i=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_i;Testing_c[Testing_g]=Testing_i[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_i=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_i;Testing_c[Testing_g]=Testing_i[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_m,Testing_l=Testing_j(Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3])))Testing_h=Testing_l+Testing_g-1 Testing_k=0;for Testing_a=Testing_g,Testing_h do Testing_k=Testing_k+1;Testing_c[Testing_a]=Testing_m[Testing_k];end;Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_h))end;elseif Testing_g<=89 then local Testing_g;Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_c[Testing_g+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_a[3]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_i[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_a[3]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_a[3]]=Testing_a[4];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_a[3]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_a[3]]=Testing_a[4];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_c[Testing_g+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];if Testing_c[Testing_a[2]]then Testing_b=Testing_b+1;else Testing_b=Testing_a[3];end;elseif Testing_g==90 then Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_a[3]]=Testing_c[Testing_a[4]];else Testing_c[Testing_a[2]]=Testing_l(Testing_o[Testing_a[3]],nil,Testing_e);end;elseif Testing_g<=96 then if Testing_g<=93 then if Testing_g==92 then local Testing_h;local Testing_g;Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];if(Testing_c[Testing_a[2]]~=Testing_a[4])then Testing_b=Testing_b+1;else Testing_b=Testing_a[3];end;else local Testing_h;local Testing_g;Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e[Testing_a[3]]=Testing_c[Testing_a[2]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];do return end;end;elseif Testing_g<=94 then local Testing_g;local Testing_e;Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e]=Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))elseif Testing_g==95 then local Testing_a=Testing_a[2]Testing_c[Testing_a]=Testing_c[Testing_a]()else local Testing_h;local Testing_g;Testing_c[Testing_a[2]]();Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=(Testing_a[3]~=0);Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e[Testing_a[3]]=Testing_c[Testing_a[2]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e[Testing_a[3]]=Testing_c[Testing_a[2]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];if Testing_c[Testing_a[2]]then Testing_b=Testing_b+1;else Testing_b=Testing_a[3];end;end;elseif Testing_g<=98 then if Testing_g==97 then local Testing_h;local Testing_g;local Testing_f;Testing_f=Testing_a[2]Testing_c[Testing_f]=Testing_c[Testing_f]()Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_f+1]=Testing_g;Testing_c[Testing_f]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[3];Testing_h=Testing_c[Testing_g]for Testing_a=Testing_g+1,Testing_a[4]do Testing_h=Testing_h..Testing_c[Testing_a];end;Testing_c[Testing_a[2]]=Testing_h;Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]={};Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];else local Testing_h;local Testing_g;Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g](Testing_c[Testing_g+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];end;elseif Testing_g<=99 then local Testing_g;local Testing_e;Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];elseif Testing_g>100 then local Testing_h;local Testing_g;Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];if(Testing_c[Testing_a[2]]~=Testing_a[4])then Testing_b=Testing_b+1;else Testing_b=Testing_a[3];end;else Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]]+Testing_c[Testing_a[4]];end;elseif Testing_g<=111 then if Testing_g<=106 then if Testing_g<=103 then if Testing_g>102 then local Testing_g;local Testing_e;Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];else local Testing_f;Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_i[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]]/Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2]Testing_c[Testing_f](Testing_c[Testing_f+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=(Testing_a[3]~=0);Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_i[Testing_a[3]]=Testing_c[Testing_a[2]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];do return end;end;elseif Testing_g<=104 then local Testing_g;Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_c[Testing_g+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_a[3]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_i[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_a[3]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_a[3]]=Testing_a[4];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_a[3]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_a[3]]=Testing_a[4];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_c[Testing_g+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];if Testing_c[Testing_a[2]]then Testing_b=Testing_b+1;else Testing_b=Testing_a[3];end;elseif Testing_g>105 then local Testing_a=Testing_a[2]Testing_c[Testing_a]=Testing_c[Testing_a](Testing_f(Testing_c,Testing_a+1,Testing_h))else local Testing_g;local Testing_e;Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];end;elseif Testing_g<=108 then if Testing_g==107 then local Testing_g;Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_c[Testing_a[3]]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_c[Testing_a[3]]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_c[Testing_g+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e[Testing_a[3]]=Testing_c[Testing_a[2]];else local Testing_d=Testing_a[2];local Testing_e=Testing_c[Testing_d]local Testing_f=Testing_c[Testing_d+2];if(Testing_f>0)then if(Testing_e>Testing_c[Testing_d+1])then Testing_b=Testing_a[3];else Testing_c[Testing_d+3]=Testing_e;end elseif(Testing_e<Testing_c[Testing_d+1])then Testing_b=Testing_a[3];else Testing_c[Testing_d+3]=Testing_e;end end;elseif Testing_g<=109 then local Testing_d=Testing_a[2];local Testing_e=Testing_c[Testing_d]local Testing_f=Testing_c[Testing_d+2];if(Testing_f>0)then if(Testing_e>Testing_c[Testing_d+1])then Testing_b=Testing_a[3];else Testing_c[Testing_d+3]=Testing_e;end elseif(Testing_e<Testing_c[Testing_d+1])then Testing_b=Testing_a[3];else Testing_c[Testing_d+3]=Testing_e;end elseif Testing_g>110 then local Testing_g;local Testing_e;Testing_e=Testing_a[2]Testing_c[Testing_e]=Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))else Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]]*Testing_c[Testing_a[4]];end;elseif Testing_g<=116 then if Testing_g<=113 then if Testing_g==112 then local Testing_g;local Testing_e;Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];else local Testing_h;local Testing_g;local Testing_e;Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_c[Testing_a[3]]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e]=Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[3];Testing_h=Testing_c[Testing_g]for Testing_a=Testing_g+1,Testing_a[4]do Testing_h=Testing_h..Testing_c[Testing_a];end;Testing_c[Testing_a[2]]=Testing_h;Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))end;elseif Testing_g<=114 then if(Testing_c[Testing_a[2]]==Testing_a[4])then Testing_b=Testing_b+1;else Testing_b=Testing_a[3];end;elseif Testing_g>115 then local Testing_g;local Testing_e;Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];else local Testing_g;local Testing_e;Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e]=Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];end;elseif Testing_g<=119 then if Testing_g<=117 then if(Testing_c[Testing_a[2]]~=Testing_a[4])then Testing_b=Testing_b+1;else Testing_b=Testing_a[3];end;elseif Testing_g==118 then local Testing_g;local Testing_e;Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))else local Testing_g;local Testing_e;Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e]=Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))end;elseif Testing_g<=120 then local Testing_a=Testing_a[2];local Testing_b=Testing_c[Testing_a];for Testing_a=Testing_a+1,Testing_h do Testing_n(Testing_b,Testing_c[Testing_a])end;elseif Testing_g>121 then local Testing_a=Testing_a[2];local Testing_b=Testing_c[Testing_a];for Testing_a=Testing_a+1,Testing_h do Testing_n(Testing_b,Testing_c[Testing_a])end;else local Testing_g;Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_c[Testing_g+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_a[3]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_i[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_a[3]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_a[3]]=Testing_a[4];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_a[3]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_a[3]]=Testing_a[4];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_c[Testing_g+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];if Testing_c[Testing_a[2]]then Testing_b=Testing_b+1;else Testing_b=Testing_a[3];end;end;elseif Testing_g<=143 then if Testing_g<=132 then if Testing_g<=127 then if Testing_g<=124 then if Testing_g>123 then local Testing_g;local Testing_e;Testing_e=Testing_a[2]Testing_c[Testing_e]=Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];else local Testing_g;Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_i[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_c[Testing_g+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_i[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]]*Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_a[3]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_b=Testing_a[3];end;elseif Testing_g<=125 then local Testing_h;local Testing_g;Testing_c[Testing_a[2]]();Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=(Testing_a[3]~=0);Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e[Testing_a[3]]=Testing_c[Testing_a[2]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e[Testing_a[3]]=Testing_c[Testing_a[2]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];if Testing_c[Testing_a[2]]then Testing_b=Testing_b+1;else Testing_b=Testing_a[3];end;elseif Testing_g>126 then if(Testing_a[2]<Testing_c[Testing_a[4]])then Testing_b=Testing_b+1;else Testing_b=Testing_a[3];end;else for Testing_a=Testing_a[2],Testing_a[3]do Testing_c[Testing_a]=nil;end;end;elseif Testing_g<=129 then if Testing_g==128 then Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]]/Testing_c[Testing_a[4]];else local Testing_g;local Testing_e;Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];end;elseif Testing_g<=130 then local Testing_g;Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_c[Testing_g+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_a[3]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_i[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_a[3]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_a[3]]=Testing_a[4];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_a[3]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_a[3]]=Testing_a[4];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_c[Testing_g+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];if Testing_c[Testing_a[2]]then Testing_b=Testing_b+1;else Testing_b=Testing_a[3];end;elseif Testing_g==131 then local Testing_f;Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2]Testing_c[Testing_f](Testing_c[Testing_f+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_c[Testing_a[3]]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2]Testing_c[Testing_f](Testing_c[Testing_f+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_c[Testing_a[3]]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2]Testing_c[Testing_f](Testing_c[Testing_f+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_c[Testing_a[3]]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2]Testing_c[Testing_f](Testing_c[Testing_f+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_c[Testing_a[3]]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2]Testing_c[Testing_f](Testing_c[Testing_f+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_c[Testing_a[3]]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2]Testing_c[Testing_f](Testing_c[Testing_f+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_c[Testing_a[3]]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2]Testing_c[Testing_f](Testing_c[Testing_f+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_c[Testing_a[3]]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2]Testing_c[Testing_f](Testing_c[Testing_f+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_c[Testing_a[3]]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2]Testing_c[Testing_f](Testing_c[Testing_f+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_c[Testing_a[3]]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2]Testing_c[Testing_f](Testing_c[Testing_f+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_c[Testing_a[3]]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2]Testing_c[Testing_f](Testing_c[Testing_f+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_c[Testing_a[3]]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2]Testing_c[Testing_f](Testing_c[Testing_f+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_c[Testing_a[3]]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2]Testing_c[Testing_f](Testing_c[Testing_f+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_c[Testing_a[3]]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2]Testing_c[Testing_f](Testing_c[Testing_f+1])else Testing_i[Testing_a[3]]=Testing_c[Testing_a[2]];end;elseif Testing_g<=137 then if Testing_g<=134 then if Testing_g>133 then local Testing_e=Testing_a[2];local Testing_f=Testing_a[4];local Testing_d=Testing_e+2 local Testing_e={Testing_c[Testing_e](Testing_c[Testing_e+1],Testing_c[Testing_d])};for Testing_a=1,Testing_f do Testing_c[Testing_d+Testing_a]=Testing_e[Testing_a];end;local Testing_e=Testing_e[1]if Testing_e then Testing_c[Testing_d]=Testing_e Testing_b=Testing_a[3];else Testing_b=Testing_b+1;end;else local Testing_g;local Testing_i;local Testing_k,Testing_m;local Testing_l;local Testing_g;Testing_c[Testing_a[2]]();Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_a[3]]=Testing_a[4];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_l=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_l;Testing_c[Testing_g]=Testing_l[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_k,Testing_m=Testing_j(Testing_c[Testing_g](Testing_c[Testing_g+1]))Testing_h=Testing_m+Testing_g-1 Testing_i=0;for Testing_a=Testing_g,Testing_h do Testing_i=Testing_i+1;Testing_c[Testing_a]=Testing_k[Testing_i];end;Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_k={Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_h))};Testing_i=0;for Testing_a=Testing_g,Testing_a[4]do Testing_i=Testing_i+1;Testing_c[Testing_a]=Testing_k[Testing_i];end Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_b=Testing_a[3];end;elseif Testing_g<=135 then if(Testing_c[Testing_a[2]]==Testing_a[4])then Testing_b=Testing_b+1;else Testing_b=Testing_a[3];end;elseif Testing_g>136 then if Testing_c[Testing_a[2]]then Testing_b=Testing_b+1;else Testing_b=Testing_a[3];end;else local Testing_g;local Testing_f;local Testing_h;Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_h=Testing_a[3];Testing_f=Testing_c[Testing_h]for Testing_a=Testing_h+1,Testing_a[4]do Testing_f=Testing_f..Testing_c[Testing_a];end;Testing_c[Testing_a[2]]=Testing_f;Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_a[3]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_a[3]]=Testing_a[4];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_c[Testing_g+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_a[3]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]={};end;elseif Testing_g<=140 then if Testing_g<=138 then local Testing_f=Testing_a[2];local Testing_d={};for Testing_a=1,#Testing_k do local Testing_a=Testing_k[Testing_a];for Testing_b=0,#Testing_a do local Testing_a=Testing_a[Testing_b];local Testing_e=Testing_a[1];local Testing_b=Testing_a[2];if Testing_e==Testing_c and Testing_b>=Testing_f then Testing_d[Testing_b]=Testing_e[Testing_b];Testing_a[1]=Testing_d;end;end;end;elseif Testing_g==139 then local Testing_k;local Testing_l,Testing_m;local Testing_i;local Testing_g;Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_i=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_i;Testing_c[Testing_g]=Testing_i[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_i=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_i;Testing_c[Testing_g]=Testing_i[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_l,Testing_m=Testing_j(Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3])))Testing_h=Testing_m+Testing_g-1 Testing_k=0;for Testing_a=Testing_g,Testing_h do Testing_k=Testing_k+1;Testing_c[Testing_a]=Testing_l[Testing_k];end;Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_h))else Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]]/Testing_c[Testing_a[4]];end;elseif Testing_g<=141 then local Testing_h;local Testing_g;Testing_c[Testing_a[2]]=Testing_i[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_c[Testing_g+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]]*Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_a[3]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];elseif Testing_g>142 then local Testing_g;local Testing_f;Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_f+1]=Testing_g;Testing_c[Testing_f]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2]Testing_c[Testing_f](Testing_c[Testing_f+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_i[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_f+1]=Testing_g;Testing_c[Testing_f]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2]Testing_c[Testing_f](Testing_c[Testing_f+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_f+1]=Testing_g;Testing_c[Testing_f]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2]Testing_c[Testing_f](Testing_c[Testing_f+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];do return end;else Testing_c[Testing_a[2]]={};Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_a[3]]=Testing_a[4];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]={};Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]={};Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_a[3]]=Testing_a[4];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];end;elseif Testing_g<=153 then if Testing_g<=148 then if Testing_g<=145 then if Testing_g==144 then if Testing_c[Testing_a[2]]then Testing_b=Testing_b+1;else Testing_b=Testing_a[3];end;else local Testing_g;Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=(Testing_a[3]~=0);Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e[Testing_a[3]]=Testing_c[Testing_a[2]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];end;elseif Testing_g<=146 then local Testing_f;Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_i[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]]/Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2]Testing_c[Testing_f](Testing_c[Testing_f+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=(Testing_a[3]~=0);Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_i[Testing_a[3]]=Testing_c[Testing_a[2]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];do return end;elseif Testing_g>147 then local Testing_h;local Testing_g;Testing_c[Testing_a[2]][Testing_a[3]]=Testing_a[4];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=(Testing_a[3]~=0);Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e[Testing_a[3]]=Testing_c[Testing_a[2]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e[Testing_a[3]]=Testing_c[Testing_a[2]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e[Testing_a[3]]=Testing_c[Testing_a[2]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];if Testing_c[Testing_a[2]]then Testing_b=Testing_b+1;else Testing_b=Testing_a[3];end;else local Testing_f;local Testing_e;Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_f=Testing_c[Testing_e];for Testing_a=Testing_e+1,Testing_a[3]do Testing_n(Testing_f,Testing_c[Testing_a])end;end;elseif Testing_g<=150 then if Testing_g==149 then Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];else local Testing_g;local Testing_f;Testing_f=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_f+1]=Testing_g;Testing_c[Testing_f]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2]Testing_c[Testing_f](Testing_c[Testing_f+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_f+1]=Testing_g;Testing_c[Testing_f]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2]Testing_c[Testing_f](Testing_c[Testing_f+1])end;elseif Testing_g<=151 then local Testing_g;local Testing_f;Testing_f=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_f+1]=Testing_g;Testing_c[Testing_f]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2]Testing_c[Testing_f](Testing_c[Testing_f+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_i[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_f+1]=Testing_g;Testing_c[Testing_f]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2]Testing_c[Testing_f](Testing_c[Testing_f+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_f+1]=Testing_g;Testing_c[Testing_f]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2]Testing_c[Testing_f](Testing_c[Testing_f+1])elseif Testing_g==152 then local Testing_g;Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_i[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_c[Testing_g+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_i[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]]*Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_a[3]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_b=Testing_a[3];else local Testing_b=Testing_a[2]local Testing_d,Testing_a=Testing_j(Testing_c[Testing_b](Testing_f(Testing_c,Testing_b+1,Testing_a[3])))Testing_h=Testing_a+Testing_b-1 local Testing_a=0;for Testing_b=Testing_b,Testing_h do Testing_a=Testing_a+1;Testing_c[Testing_b]=Testing_d[Testing_a];end;end;elseif Testing_g<=158 then if Testing_g<=155 then if Testing_g==154 then local Testing_h;local Testing_g;Testing_c[Testing_a[2]]();Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];if Testing_c[Testing_a[2]]then Testing_b=Testing_b+1;else Testing_b=Testing_a[3];end;else if not Testing_c[Testing_a[2]]then Testing_b=Testing_b+1;else Testing_b=Testing_a[3];end;end;elseif Testing_g<=156 then local Testing_b=Testing_a[2]local Testing_e={Testing_c[Testing_b](Testing_c[Testing_b+1])};local Testing_d=0;for Testing_a=Testing_b,Testing_a[4]do Testing_d=Testing_d+1;Testing_c[Testing_a]=Testing_e[Testing_d];end elseif Testing_g==157 then Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];else local Testing_g;local Testing_e;Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];end;elseif Testing_g<=161 then if Testing_g<=159 then local Testing_b=Testing_a[2]local Testing_d,Testing_a=Testing_j(Testing_c[Testing_b](Testing_f(Testing_c,Testing_b+1,Testing_a[3])))Testing_h=Testing_a+Testing_b-1 local Testing_a=0;for Testing_b=Testing_b,Testing_h do Testing_a=Testing_a+1;Testing_c[Testing_b]=Testing_d[Testing_a];end;elseif Testing_g>160 then local Testing_g;local Testing_i;local Testing_k,Testing_m;local Testing_l;local Testing_g;Testing_e[Testing_a[3]]=Testing_c[Testing_a[2]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_l=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_l;Testing_c[Testing_g]=Testing_l[Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_k,Testing_m=Testing_j(Testing_c[Testing_g](Testing_c[Testing_g+1]))Testing_h=Testing_m+Testing_g-1 Testing_i=0;for Testing_a=Testing_g,Testing_h do Testing_i=Testing_i+1;Testing_c[Testing_a]=Testing_k[Testing_i];end;Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_k={Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_h))};Testing_i=0;for Testing_a=Testing_g,Testing_a[4]do Testing_i=Testing_i+1;Testing_c[Testing_a]=Testing_k[Testing_i];end Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_b=Testing_a[3];else local Testing_k;local Testing_l,Testing_m;local Testing_i;local Testing_g;Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_i=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_i;Testing_c[Testing_g]=Testing_i[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_i=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_i;Testing_c[Testing_g]=Testing_i[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_l,Testing_m=Testing_j(Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3])))Testing_h=Testing_m+Testing_g-1 Testing_k=0;for Testing_a=Testing_g,Testing_h do Testing_k=Testing_k+1;Testing_c[Testing_a]=Testing_l[Testing_k];end;Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_h))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g](Testing_c[Testing_g+1])end;elseif Testing_g<=162 then local Testing_e;local Testing_f;Testing_f=Testing_a[2];Testing_e=Testing_c[Testing_a[3]];Testing_c[Testing_f+1]=Testing_e;Testing_c[Testing_f]=Testing_e[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];elseif Testing_g==163 then local Testing_a=Testing_a[2]Testing_c[Testing_a]=Testing_c[Testing_a](Testing_c[Testing_a+1])else Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];end;elseif Testing_g<=247 then if Testing_g<=205 then if Testing_g<=184 then if Testing_g<=174 then if Testing_g<=169 then if Testing_g<=166 then if Testing_g>165 then do return Testing_c[Testing_a[2]]end else local Testing_a=Testing_a[2]Testing_c[Testing_a](Testing_c[Testing_a+1])end;elseif Testing_g<=167 then if(Testing_c[Testing_a[2]]<=Testing_a[4])then Testing_b=Testing_b+1;else Testing_b=Testing_a[3];end;elseif Testing_g>168 then local Testing_f;Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_i[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]]/Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2]Testing_c[Testing_f](Testing_c[Testing_f+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=(Testing_a[3]~=0);Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_i[Testing_a[3]]=Testing_c[Testing_a[2]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];do return end;else Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]]*Testing_a[4];end;elseif Testing_g<=171 then if Testing_g>170 then Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]];else local Testing_h;local Testing_g;Testing_c[Testing_a[2]]=Testing_i[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];do return end;end;elseif Testing_g<=172 then local Testing_k;local Testing_l,Testing_m;local Testing_i;local Testing_g;Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_i=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_i;Testing_c[Testing_g]=Testing_i[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_i=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_i;Testing_c[Testing_g]=Testing_i[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_l,Testing_m=Testing_j(Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3])))Testing_h=Testing_m+Testing_g-1 Testing_k=0;for Testing_a=Testing_g,Testing_h do Testing_k=Testing_k+1;Testing_c[Testing_a]=Testing_l[Testing_k];end;Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_h))elseif Testing_g>173 then local Testing_g;local Testing_e;Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];else local Testing_h;local Testing_g;Testing_g=Testing_a[2]Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];end;elseif Testing_g<=179 then if Testing_g<=176 then if Testing_g>175 then local Testing_h;local Testing_g;Testing_c[Testing_a[2]]();Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g](Testing_c[Testing_g+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g](Testing_c[Testing_g+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g](Testing_c[Testing_g+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_b=Testing_a[3];else local Testing_j;local Testing_h;local Testing_i;local Testing_g;Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_i=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_i;Testing_c[Testing_g]=Testing_i[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e[Testing_a[3]]=Testing_c[Testing_a[2]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_g]Testing_j=Testing_c[Testing_g+2];if(Testing_j>0)then if(Testing_h>Testing_c[Testing_g+1])then Testing_b=Testing_a[3];else Testing_c[Testing_g+3]=Testing_h;end elseif(Testing_h<Testing_c[Testing_g+1])then Testing_b=Testing_a[3];else Testing_c[Testing_g+3]=Testing_h;end end;elseif Testing_g<=177 then local Testing_b=Testing_a[2]Testing_c[Testing_b](Testing_f(Testing_c,Testing_b+1,Testing_a[3]))elseif Testing_g>178 then local Testing_f;Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_c[Testing_a[3]]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2]Testing_c[Testing_f](Testing_c[Testing_f+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_c[Testing_a[3]]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];else local Testing_h;local Testing_g;Testing_c[Testing_a[2]]=Testing_i[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_c[Testing_g+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]]*Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_a[3]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];end;elseif Testing_g<=181 then if Testing_g==180 then if(Testing_c[Testing_a[2]]<Testing_c[Testing_a[4]])then Testing_b=Testing_b+1;else Testing_b=Testing_a[3];end;else Testing_c[Testing_a[2]]();end;elseif Testing_g<=182 then Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_a[3]]=Testing_a[4];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];elseif Testing_g==183 then local Testing_g;Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]={};Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e[Testing_a[3]]=Testing_c[Testing_a[2]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];else local Testing_i;local Testing_l,Testing_k;local Testing_g;Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_l,Testing_k=Testing_j(Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3])))Testing_h=Testing_k+Testing_g-1 Testing_i=0;for Testing_a=Testing_g,Testing_h do Testing_i=Testing_i+1;Testing_c[Testing_a]=Testing_l[Testing_i];end;Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_h))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g]()Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];for Testing_a=Testing_a[2],Testing_a[3]do Testing_c[Testing_a]=nil;end;Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=(Testing_a[3]~=0);Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e[Testing_a[3]]=Testing_c[Testing_a[2]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_a[3]]=Testing_a[4];end;elseif Testing_g<=194 then if Testing_g<=189 then if Testing_g<=186 then if Testing_g>185 then local Testing_h;local Testing_g;Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g](Testing_c[Testing_g+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g](Testing_c[Testing_g+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g](Testing_c[Testing_g+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_b=Testing_a[3];else Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];end;elseif Testing_g<=187 then local Testing_h;local Testing_g;Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];elseif Testing_g>188 then Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_a[3]]=Testing_c[Testing_a[4]];else local Testing_h;local Testing_g;Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e[Testing_a[3]]=Testing_c[Testing_a[2]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];do return end;end;elseif Testing_g<=191 then if Testing_g==190 then local Testing_h=Testing_o[Testing_a[3]];local Testing_g;local Testing_f={};Testing_g=Testing_r({},{__index=function(Testing_b,Testing_a)local Testing_a=Testing_f[Testing_a];return Testing_a[1][Testing_a[2]];end,__newindex=function(Testing_c,Testing_a,Testing_b)local Testing_a=Testing_f[Testing_a]Testing_a[1][Testing_a[2]]=Testing_b;end;});for Testing_e=1,Testing_a[4]do Testing_b=Testing_b+1;local Testing_a=Testing_d[Testing_b];if Testing_a[1]==171 then Testing_f[Testing_e-1]={Testing_c,Testing_a[3]};else Testing_f[Testing_e-1]={Testing_i,Testing_a[3]};end;Testing_k[#Testing_k+1]=Testing_f;end;Testing_c[Testing_a[2]]=Testing_l(Testing_h,Testing_g,Testing_e);else local Testing_k;local Testing_l,Testing_m;local Testing_i;local Testing_g;Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_i=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_i;Testing_c[Testing_g]=Testing_i[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_i=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_i;Testing_c[Testing_g]=Testing_i[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_l,Testing_m=Testing_j(Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3])))Testing_h=Testing_m+Testing_g-1 Testing_k=0;for Testing_a=Testing_g,Testing_h do Testing_k=Testing_k+1;Testing_c[Testing_a]=Testing_l[Testing_k];end;Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_h))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g](Testing_c[Testing_g+1])end;elseif Testing_g<=192 then local Testing_k;local Testing_m,Testing_l;local Testing_i;local Testing_g;Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_i=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_i;Testing_c[Testing_g]=Testing_i[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_i=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_i;Testing_c[Testing_g]=Testing_i[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_m,Testing_l=Testing_j(Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3])))Testing_h=Testing_l+Testing_g-1 Testing_k=0;for Testing_a=Testing_g,Testing_h do Testing_k=Testing_k+1;Testing_c[Testing_a]=Testing_m[Testing_k];end;Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_h))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g](Testing_c[Testing_g+1])elseif Testing_g>193 then local Testing_k;local Testing_l,Testing_m;local Testing_i;local Testing_g;Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_i=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_i;Testing_c[Testing_g]=Testing_i[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_i=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_i;Testing_c[Testing_g]=Testing_i[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_l,Testing_m=Testing_j(Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3])))Testing_h=Testing_m+Testing_g-1 Testing_k=0;for Testing_a=Testing_g,Testing_h do Testing_k=Testing_k+1;Testing_c[Testing_a]=Testing_l[Testing_k];end;Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_h))else local Testing_g;local Testing_e;Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_h=Testing_e+Testing_p-1;for Testing_a=Testing_e,Testing_h do Testing_g=Testing_m[Testing_a-Testing_e];Testing_c[Testing_a]=Testing_g;end;Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];do return Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_h))end;Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];do return Testing_f(Testing_c,Testing_e,Testing_h)end;Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];do return end;end;elseif Testing_g<=199 then if Testing_g<=196 then if Testing_g==195 then if(Testing_c[Testing_a[2]]<=Testing_a[4])then Testing_b=Testing_a[3];else Testing_b=Testing_b+1;end;else Testing_c[Testing_a[2]]={};end;elseif Testing_g<=197 then local Testing_h;local Testing_g;Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];if(Testing_c[Testing_a[2]]~=Testing_a[4])then Testing_b=Testing_b+1;else Testing_b=Testing_a[3];end;elseif Testing_g>198 then Testing_c[Testing_a[2]]={};else local Testing_g;local Testing_e;Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))end;elseif Testing_g<=202 then if Testing_g<=200 then do return end;elseif Testing_g==201 then local Testing_d=Testing_a[2];local Testing_f=Testing_a[4];local Testing_e=Testing_d+2 local Testing_d={Testing_c[Testing_d](Testing_c[Testing_d+1],Testing_c[Testing_e])};for Testing_a=1,Testing_f do Testing_c[Testing_e+Testing_a]=Testing_d[Testing_a];end;local Testing_d=Testing_d[1]if Testing_d then Testing_c[Testing_e]=Testing_d Testing_b=Testing_a[3];else Testing_b=Testing_b+1;end;else local Testing_k;local Testing_m,Testing_l;local Testing_i;local Testing_g;Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_i=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_i;Testing_c[Testing_g]=Testing_i[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_i=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_i;Testing_c[Testing_g]=Testing_i[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_m,Testing_l=Testing_j(Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3])))Testing_h=Testing_l+Testing_g-1 Testing_k=0;for Testing_a=Testing_g,Testing_h do Testing_k=Testing_k+1;Testing_c[Testing_a]=Testing_m[Testing_k];end;Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_h))end;elseif Testing_g<=203 then local Testing_i;local Testing_l,Testing_m;local Testing_k;local Testing_g;Testing_e[Testing_a[3]]=Testing_c[Testing_a[2]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=(Testing_a[3]~=0);Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e[Testing_a[3]]=Testing_c[Testing_a[2]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e[Testing_a[3]]=Testing_c[Testing_a[2]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_k=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_k;Testing_c[Testing_g]=Testing_k[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_l,Testing_m=Testing_j(Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3])))Testing_h=Testing_m+Testing_g-1 Testing_i=0;for Testing_a=Testing_g,Testing_h do Testing_i=Testing_i+1;Testing_c[Testing_a]=Testing_l[Testing_i];end;elseif Testing_g>204 then local Testing_g;local Testing_i;local Testing_k,Testing_m;local Testing_l;local Testing_g;Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_l=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_l;Testing_c[Testing_g]=Testing_l[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_k,Testing_m=Testing_j(Testing_c[Testing_g](Testing_c[Testing_g+1]))Testing_h=Testing_m+Testing_g-1 Testing_i=0;for Testing_a=Testing_g,Testing_h do Testing_i=Testing_i+1;Testing_c[Testing_a]=Testing_k[Testing_i];end;Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_k={Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_h))};Testing_i=0;for Testing_a=Testing_g,Testing_a[4]do Testing_i=Testing_i+1;Testing_c[Testing_a]=Testing_k[Testing_i];end Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_b=Testing_a[3];else local Testing_g;local Testing_e;Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];end;elseif Testing_g<=226 then if Testing_g<=215 then if Testing_g<=210 then if Testing_g<=207 then if Testing_g>206 then local Testing_h;local Testing_g;Testing_e[Testing_a[3]]=Testing_c[Testing_a[2]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];if(Testing_c[Testing_a[2]]~=Testing_a[4])then Testing_b=Testing_b+1;else Testing_b=Testing_a[3];end;else local Testing_h;local Testing_g;Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_a[3]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_a[3]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_a[3]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_a[3]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_a[3]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_a[3]]=Testing_c[Testing_a[4]];end;elseif Testing_g<=208 then local Testing_g;Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_i[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_c[Testing_g+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_i[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]]*Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_a[3]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_b=Testing_a[3];elseif Testing_g==209 then local Testing_i;local Testing_m,Testing_l;local Testing_k;local Testing_g;Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_k=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_k;Testing_c[Testing_g]=Testing_k[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_m,Testing_l=Testing_j(Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3])))Testing_h=Testing_l+Testing_g-1 Testing_i=0;for Testing_a=Testing_g,Testing_h do Testing_i=Testing_i+1;Testing_c[Testing_a]=Testing_m[Testing_i];end;Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_h))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]();else local Testing_h;local Testing_g;Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];if(Testing_c[Testing_a[2]]~=Testing_a[4])then Testing_b=Testing_b+1;else Testing_b=Testing_a[3];end;end;elseif Testing_g<=212 then if Testing_g>211 then local Testing_b=Testing_a[2]Testing_c[Testing_b]=Testing_c[Testing_b](Testing_f(Testing_c,Testing_b+1,Testing_a[3]))else if(Testing_c[Testing_a[2]]<=Testing_a[4])then Testing_b=Testing_b+1;else Testing_b=Testing_a[3];end;end;elseif Testing_g<=213 then local Testing_h;local Testing_g;Testing_c[Testing_a[2]]=Testing_i[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];if Testing_c[Testing_a[2]]then Testing_b=Testing_b+1;else Testing_b=Testing_a[3];end;elseif Testing_g==214 then local Testing_h;local Testing_g;Testing_c[Testing_a[2]][Testing_a[3]]=Testing_a[4];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=(Testing_a[3]~=0);Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e[Testing_a[3]]=Testing_c[Testing_a[2]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e[Testing_a[3]]=Testing_c[Testing_a[2]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e[Testing_a[3]]=Testing_c[Testing_a[2]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];if Testing_c[Testing_a[2]]then Testing_b=Testing_b+1;else Testing_b=Testing_a[3];end;else Testing_c[Testing_a[2]]=(Testing_a[3]~=0);end;elseif Testing_g<=220 then if Testing_g<=217 then if Testing_g==216 then local Testing_b=Testing_a[2];local Testing_d=Testing_c[Testing_b];for Testing_a=Testing_b+1,Testing_a[3]do Testing_n(Testing_d,Testing_c[Testing_a])end;else local Testing_h;local Testing_g;Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]={};Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_a[3]]=Testing_a[4];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];end;elseif Testing_g<=218 then local Testing_h;local Testing_g;Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))elseif Testing_g==219 then Testing_c[Testing_a[2]][Testing_a[3]]=Testing_a[4];else local Testing_h;local Testing_g;Testing_c[Testing_a[2]]();Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];if Testing_c[Testing_a[2]]then Testing_b=Testing_b+1;else Testing_b=Testing_a[3];end;end;elseif Testing_g<=223 then if Testing_g<=221 then Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]]*Testing_c[Testing_a[4]];elseif Testing_g>222 then local Testing_h;local Testing_g;Testing_c[Testing_a[2]]=Testing_i[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];if Testing_c[Testing_a[2]]then Testing_b=Testing_b+1;else Testing_b=Testing_a[3];end;else Testing_c[Testing_a[2]][Testing_c[Testing_a[3]]]=Testing_c[Testing_a[4]];end;elseif Testing_g<=224 then local Testing_h;local Testing_g;Testing_c[Testing_a[2]]();Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];if Testing_c[Testing_a[2]]then Testing_b=Testing_b+1;else Testing_b=Testing_a[3];end;elseif Testing_g>225 then local Testing_a=Testing_a[2];do return Testing_c[Testing_a](Testing_f(Testing_c,Testing_a+1,Testing_h))end;else local Testing_a=Testing_a[2];Testing_h=Testing_a+Testing_p-1;for Testing_b=Testing_a,Testing_h do local Testing_a=Testing_m[Testing_b-Testing_a];Testing_c[Testing_b]=Testing_a;end;end;elseif Testing_g<=236 then if Testing_g<=231 then if Testing_g<=228 then if Testing_g>227 then Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];else local Testing_j;local Testing_h;local Testing_i;local Testing_g;Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_i=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_i;Testing_c[Testing_g]=Testing_i[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g](Testing_c[Testing_g+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_g]Testing_j=Testing_c[Testing_g+2];if(Testing_j>0)then if(Testing_h>Testing_c[Testing_g+1])then Testing_b=Testing_a[3];else Testing_c[Testing_g+3]=Testing_h;end elseif(Testing_h<Testing_c[Testing_g+1])then Testing_b=Testing_a[3];else Testing_c[Testing_g+3]=Testing_h;end end;elseif Testing_g<=229 then if(Testing_a[2]<Testing_c[Testing_a[4]])then Testing_b=Testing_b+1;else Testing_b=Testing_a[3];end;elseif Testing_g==230 then local Testing_f;Testing_f=Testing_a[2]Testing_c[Testing_f](Testing_c[Testing_f+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_c[Testing_a[3]]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2]Testing_c[Testing_f](Testing_c[Testing_f+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_c[Testing_a[3]]]=Testing_c[Testing_a[4]];else Testing_c[Testing_a[2]]=Testing_i[Testing_a[3]];end;elseif Testing_g<=233 then if Testing_g==232 then Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]];else local Testing_g;Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_a[3]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_c[Testing_a[3]]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_c[Testing_a[3]]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];end;elseif Testing_g<=234 then local Testing_g;Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_a[3]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_a[3]]=Testing_c[Testing_a[4]];elseif Testing_g==235 then local Testing_g;Testing_g=Testing_a[2]Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];if(Testing_c[Testing_a[2]]==Testing_c[Testing_a[4]])then Testing_b=Testing_b+1;else Testing_b=Testing_a[3];end;else if(Testing_c[Testing_a[2]]<Testing_c[Testing_a[4]])then Testing_b=Testing_b+1;else Testing_b=Testing_a[3];end;end;elseif Testing_g<=241 then if Testing_g<=238 then if Testing_g>237 then local Testing_a=Testing_a[2];do return Testing_f(Testing_c,Testing_a,Testing_h)end;else local Testing_a=Testing_a[2]Testing_c[Testing_a](Testing_c[Testing_a+1])end;elseif Testing_g<=239 then local Testing_h;local Testing_g;Testing_g=Testing_a[2]Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g](Testing_c[Testing_g+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]={};Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];elseif Testing_g>240 then local Testing_l;local Testing_n,Testing_m;local Testing_k;local Testing_g;Testing_c[Testing_a[2]]=Testing_i[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_k=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_k;Testing_c[Testing_g]=Testing_k[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g](Testing_c[Testing_g+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_i[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_k=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_k;Testing_c[Testing_g]=Testing_k[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_n,Testing_m=Testing_j(Testing_c[Testing_g]())Testing_h=Testing_m+Testing_g-1 Testing_l=0;for Testing_a=Testing_g,Testing_h do Testing_l=Testing_l+1;Testing_c[Testing_a]=Testing_n[Testing_l];end;Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_h))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];do return end;else local Testing_h;local Testing_j;local Testing_i;local Testing_g;Testing_g=Testing_a[2]Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]={};Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e[Testing_a[3]]=Testing_c[Testing_a[2]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_i=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_i;Testing_c[Testing_g]=Testing_i[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_j={Testing_c[Testing_g](Testing_c[Testing_g+1])};Testing_h=0;for Testing_a=Testing_g,Testing_a[4]do Testing_h=Testing_h+1;Testing_c[Testing_a]=Testing_j[Testing_h];end Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_b=Testing_a[3];end;elseif Testing_g<=244 then if Testing_g<=242 then local Testing_i;local Testing_l,Testing_m;local Testing_k;local Testing_g;Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_k=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_k;Testing_c[Testing_g]=Testing_k[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_l,Testing_m=Testing_j(Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3])))Testing_h=Testing_m+Testing_g-1 Testing_i=0;for Testing_a=Testing_g,Testing_h do Testing_i=Testing_i+1;Testing_c[Testing_a]=Testing_l[Testing_i];end;Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_h))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]();elseif Testing_g==243 then local Testing_g;local Testing_e;Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]={};Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_c[Testing_a[3]]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=(Testing_a[3]~=0);else local Testing_a=Testing_a[2]Testing_c[Testing_a](Testing_f(Testing_c,Testing_a+1,Testing_h))end;elseif Testing_g<=245 then local Testing_g;Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g](Testing_c[Testing_g+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];do return end;elseif Testing_g==246 then local Testing_h;local Testing_g;Testing_c[Testing_a[2]]();Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];else local Testing_k;local Testing_m,Testing_l;local Testing_i;local Testing_g;Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_i=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_i;Testing_c[Testing_g]=Testing_i[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_i=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_i;Testing_c[Testing_g]=Testing_i[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_m,Testing_l=Testing_j(Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3])))Testing_h=Testing_l+Testing_g-1 Testing_k=0;for Testing_a=Testing_g,Testing_h do Testing_k=Testing_k+1;Testing_c[Testing_a]=Testing_m[Testing_k];end;Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_h))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];do return end;end;elseif Testing_g<=288 then if Testing_g<=267 then if Testing_g<=257 then if Testing_g<=252 then if Testing_g<=249 then if Testing_g==248 then local Testing_f;Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_i[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]]/Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2]Testing_c[Testing_f](Testing_c[Testing_f+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=(Testing_a[3]~=0);Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_i[Testing_a[3]]=Testing_c[Testing_a[2]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];do return end;else local Testing_g;local Testing_e;local Testing_h;Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_h=Testing_a[3];Testing_e=Testing_c[Testing_h]for Testing_a=Testing_h+1,Testing_a[4]do Testing_e=Testing_e..Testing_c[Testing_a];end;Testing_c[Testing_a[2]]=Testing_e;Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];do return end;end;elseif Testing_g<=250 then local Testing_g;local Testing_e;Testing_c[Testing_a[2]]={};Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_a[3]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_a[3]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e]=Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];elseif Testing_g>251 then Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]]+Testing_c[Testing_a[4]];else local Testing_h;local Testing_g;Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];if(Testing_c[Testing_a[2]]~=Testing_a[4])then Testing_b=Testing_b+1;else Testing_b=Testing_a[3];end;end;elseif Testing_g<=254 then if Testing_g==253 then Testing_c[Testing_a[2]]=Testing_l(Testing_o[Testing_a[3]],nil,Testing_e);else local Testing_a=Testing_a[2]local Testing_d,Testing_b=Testing_j(Testing_c[Testing_a](Testing_c[Testing_a+1]))Testing_h=Testing_b+Testing_a-1 local Testing_b=0;for Testing_a=Testing_a,Testing_h do Testing_b=Testing_b+1;Testing_c[Testing_a]=Testing_d[Testing_b];end;end;elseif Testing_g<=255 then if(Testing_c[Testing_a[2]]==Testing_c[Testing_a[4]])then Testing_b=Testing_b+1;else Testing_b=Testing_a[3];end;elseif Testing_g>256 then local Testing_h;local Testing_g;Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];else local Testing_h;local Testing_g;Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];do return end;end;elseif Testing_g<=262 then if Testing_g<=259 then if Testing_g>258 then Testing_c[Testing_a[2]]=(Testing_a[3]~=0);else local Testing_h;local Testing_g;Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))end;elseif Testing_g<=260 then Testing_c[Testing_a[2]]();Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];if(Testing_c[Testing_a[2]]==Testing_a[4])then Testing_b=Testing_b+1;else Testing_b=Testing_a[3];end;elseif Testing_g>261 then local Testing_b=Testing_a[2];do return Testing_c[Testing_b](Testing_f(Testing_c,Testing_b+1,Testing_a[3]))end;else local Testing_f;Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2]Testing_c[Testing_f]=Testing_c[Testing_f](Testing_c[Testing_f+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2]Testing_c[Testing_f]=Testing_c[Testing_f](Testing_c[Testing_f+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];if(Testing_c[Testing_a[2]]==Testing_c[Testing_a[4]])then Testing_b=Testing_b+1;else Testing_b=Testing_a[3];end;end;elseif Testing_g<=264 then if Testing_g>263 then local Testing_h;local Testing_g;Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_c[Testing_g+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_c[Testing_a[3]]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=(Testing_a[3]~=0);Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))else local Testing_k;local Testing_l,Testing_m;local Testing_i;local Testing_g;Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_i=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_i;Testing_c[Testing_g]=Testing_i[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_i=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_i;Testing_c[Testing_g]=Testing_i[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_l,Testing_m=Testing_j(Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3])))Testing_h=Testing_m+Testing_g-1 Testing_k=0;for Testing_a=Testing_g,Testing_h do Testing_k=Testing_k+1;Testing_c[Testing_a]=Testing_l[Testing_k];end;Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_h))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];do return end;end;elseif Testing_g<=265 then local Testing_h;local Testing_g;Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))elseif Testing_g==266 then Testing_c[Testing_a[2]][Testing_a[3]]=Testing_c[Testing_a[4]];else Testing_e[Testing_a[3]]=Testing_c[Testing_a[2]];end;elseif Testing_g<=277 then if Testing_g<=272 then if Testing_g<=269 then if Testing_g==268 then local Testing_f=Testing_a[2];local Testing_e={};for Testing_a=1,#Testing_k do local Testing_a=Testing_k[Testing_a];for Testing_b=0,#Testing_a do local Testing_a=Testing_a[Testing_b];local Testing_d=Testing_a[1];local Testing_b=Testing_a[2];if Testing_d==Testing_c and Testing_b>=Testing_f then Testing_e[Testing_b]=Testing_d[Testing_b];Testing_a[1]=Testing_e;end;end;end;else Testing_c[Testing_a[2]]=Testing_i[Testing_a[3]];end;elseif Testing_g<=270 then local Testing_h;local Testing_g;Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_a[3]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_a[3]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_a[3]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_a[3]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_a[3]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];elseif Testing_g==271 then local Testing_h;local Testing_g;Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];if(Testing_c[Testing_a[2]]==Testing_c[Testing_a[4]])then Testing_b=Testing_b+1;else Testing_b=Testing_a[3];end;else Testing_c[Testing_a[2]]();end;elseif Testing_g<=274 then if Testing_g==273 then local Testing_b=Testing_a[2]Testing_c[Testing_b]=Testing_c[Testing_b](Testing_f(Testing_c,Testing_b+1,Testing_a[3]))else local Testing_h;local Testing_g;Testing_c[Testing_a[2]]();Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_b=Testing_a[3];end;elseif Testing_g<=275 then for Testing_a=Testing_a[2],Testing_a[3]do Testing_c[Testing_a]=nil;end;elseif Testing_g>276 then do return Testing_c[Testing_a[2]]end else Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]]*Testing_a[4];end;elseif Testing_g<=282 then if Testing_g<=279 then if Testing_g>278 then local Testing_g;local Testing_f;Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_c[Testing_a[3]]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_f+1]=Testing_g;Testing_c[Testing_f]=Testing_g[Testing_a[4]];else local Testing_g;local Testing_e;Testing_c[Testing_a[2]]={};Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_a[3]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_a[3]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e]=Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];end;elseif Testing_g<=280 then local Testing_g;local Testing_e;Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];elseif Testing_g>281 then Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];else local Testing_f;local Testing_e;Testing_c[Testing_a[2]]=Testing_i[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_f=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_f;Testing_c[Testing_e]=Testing_f[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_c[Testing_e+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];do return end;end;elseif Testing_g<=285 then if Testing_g<=283 then local Testing_g;local Testing_e;Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_h=Testing_e+Testing_p-1;for Testing_a=Testing_e,Testing_h do Testing_g=Testing_m[Testing_a-Testing_e];Testing_c[Testing_a]=Testing_g;end;Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];do return Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_h))end;Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];do return Testing_f(Testing_c,Testing_e,Testing_h)end;Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];do return end;elseif Testing_g>284 then local Testing_g;local Testing_f;Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2]Testing_c[Testing_f]=Testing_c[Testing_f](Testing_c[Testing_f+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_a[3]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_c[Testing_a[3]]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_c[Testing_a[3]]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=(Testing_a[3]~=0);Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_c[Testing_a[3]]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=(Testing_a[3]~=0);Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_c[Testing_a[3]]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_f+1]=Testing_g;Testing_c[Testing_f]=Testing_g[Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2]Testing_c[Testing_f](Testing_c[Testing_f+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_c[Testing_a[3]]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_c[Testing_a[3]]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_c[Testing_a[3]]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2]Testing_c[Testing_f](Testing_c[Testing_f+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_c[Testing_a[3]]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2]Testing_c[Testing_f](Testing_c[Testing_f+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_c[Testing_a[3]]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2]Testing_c[Testing_f](Testing_c[Testing_f+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_c[Testing_a[3]]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2]Testing_c[Testing_f](Testing_c[Testing_f+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_c[Testing_a[3]]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2]Testing_c[Testing_f](Testing_c[Testing_f+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_c[Testing_a[3]]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2]Testing_c[Testing_f](Testing_c[Testing_f+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_c[Testing_a[3]]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2]Testing_c[Testing_f](Testing_c[Testing_f+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_c[Testing_a[3]]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2]Testing_c[Testing_f](Testing_c[Testing_f+1])else local Testing_h;local Testing_g;Testing_c[Testing_a[2]]();Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]]-Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]]/Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e[Testing_a[3]]=Testing_c[Testing_a[2]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e[Testing_a[3]]=Testing_c[Testing_a[2]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]={};Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]]*Testing_a[4];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]]+Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_a[3]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e[Testing_a[3]]=Testing_c[Testing_a[2]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g](Testing_c[Testing_g+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=(Testing_a[3]~=0);Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_a[3]]=Testing_a[4];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];end;elseif Testing_g<=286 then local Testing_g;local Testing_f;Testing_f=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_f+1]=Testing_g;Testing_c[Testing_f]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2]Testing_c[Testing_f](Testing_c[Testing_f+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_i[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_f+1]=Testing_g;Testing_c[Testing_f]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2]Testing_c[Testing_f](Testing_c[Testing_f+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_f+1]=Testing_g;Testing_c[Testing_f]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2]Testing_c[Testing_f](Testing_c[Testing_f+1])elseif Testing_g==287 then local Testing_a=Testing_a[2]Testing_c[Testing_a](Testing_f(Testing_c,Testing_a+1,Testing_h))else local Testing_h;local Testing_g;Testing_c[Testing_a[2]][Testing_a[3]]=Testing_a[4];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=(Testing_a[3]~=0);Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e[Testing_a[3]]=Testing_c[Testing_a[2]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e[Testing_a[3]]=Testing_c[Testing_a[2]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e[Testing_a[3]]=Testing_c[Testing_a[2]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];if Testing_c[Testing_a[2]]then Testing_b=Testing_b+1;else Testing_b=Testing_a[3];end;end;elseif Testing_g<=309 then if Testing_g<=298 then if Testing_g<=293 then if Testing_g<=290 then if Testing_g>289 then local Testing_g;local Testing_f;Testing_f=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_f+1]=Testing_g;Testing_c[Testing_f]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2]Testing_c[Testing_f](Testing_c[Testing_f+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_f+1]=Testing_g;Testing_c[Testing_f]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2]Testing_c[Testing_f](Testing_c[Testing_f+1])else local Testing_d=Testing_a[2]local Testing_e={Testing_c[Testing_d](Testing_c[Testing_d+1])};local Testing_b=0;for Testing_a=Testing_d,Testing_a[4]do Testing_b=Testing_b+1;Testing_c[Testing_a]=Testing_e[Testing_b];end end;elseif Testing_g<=291 then local Testing_f;Testing_f=Testing_a[2]Testing_c[Testing_f]=Testing_c[Testing_f](Testing_c[Testing_f+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_c[Testing_a[3]]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2]Testing_c[Testing_f]=Testing_c[Testing_f](Testing_c[Testing_f+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=(Testing_a[3]~=0);elseif Testing_g==292 then local Testing_h;local Testing_g;Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_c[Testing_g+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];else local Testing_g;local Testing_f;Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_f+1]=Testing_g;Testing_c[Testing_f]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2]Testing_c[Testing_f](Testing_c[Testing_f+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_i[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_f+1]=Testing_g;Testing_c[Testing_f]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2]Testing_c[Testing_f](Testing_c[Testing_f+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_f+1]=Testing_g;Testing_c[Testing_f]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2]Testing_c[Testing_f](Testing_c[Testing_f+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];do return end;end;elseif Testing_g<=295 then if Testing_g>294 then local Testing_h;local Testing_g;Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];if(Testing_c[Testing_a[2]]~=Testing_a[4])then Testing_b=Testing_b+1;else Testing_b=Testing_a[3];end;else Testing_b=Testing_a[3];end;elseif Testing_g<=296 then Testing_c[Testing_a[2]]();Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_a[3]]=Testing_a[4];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_b=Testing_a[3];elseif Testing_g>297 then local Testing_h;local Testing_g;Testing_c[Testing_a[2]]();Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]]-Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]]/Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e[Testing_a[3]]=Testing_c[Testing_a[2]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e[Testing_a[3]]=Testing_c[Testing_a[2]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]={};Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]]*Testing_a[4];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]]+Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_a[3]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e[Testing_a[3]]=Testing_c[Testing_a[2]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g](Testing_c[Testing_g+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=(Testing_a[3]~=0);Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_a[3]]=Testing_a[4];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];else Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];end;elseif Testing_g<=303 then if Testing_g<=300 then if Testing_g==299 then local Testing_h;local Testing_g;Testing_c[Testing_a[2]]=Testing_i[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_c[Testing_g+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]]*Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_a[3]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];else local Testing_g;local Testing_f;Testing_f=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_f+1]=Testing_g;Testing_c[Testing_f]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2]Testing_c[Testing_f](Testing_c[Testing_f+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_f+1]=Testing_g;Testing_c[Testing_f]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2]Testing_c[Testing_f](Testing_c[Testing_f+1])end;elseif Testing_g<=301 then Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];elseif Testing_g==302 then local Testing_h;local Testing_g;Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g](Testing_c[Testing_g+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];else local Testing_g;local Testing_e;Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e]=Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];if(Testing_c[Testing_a[2]]~=Testing_a[4])then Testing_b=Testing_b+1;else Testing_b=Testing_a[3];end;end;elseif Testing_g<=306 then if Testing_g<=304 then Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];elseif Testing_g==305 then do return end;else local Testing_f;Testing_c[Testing_a[2]]={};Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_a[3]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_a[3]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_a[3]]=Testing_a[4];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_a[3]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2]Testing_c[Testing_f](Testing_c[Testing_f+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];end;elseif Testing_g<=307 then Testing_i[Testing_a[3]]=Testing_c[Testing_a[2]];elseif Testing_g==308 then local Testing_b=Testing_a[2]Testing_c[Testing_b](Testing_f(Testing_c,Testing_b+1,Testing_a[3]))else local Testing_h;local Testing_g;Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e[Testing_a[3]]=Testing_c[Testing_a[2]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];do return end;end;elseif Testing_g<=319 then if Testing_g<=314 then if Testing_g<=311 then if Testing_g>310 then local Testing_g;local Testing_e;Testing_e=Testing_a[2]Testing_c[Testing_e]=Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];else Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];end;elseif Testing_g<=312 then local Testing_f;local Testing_g;Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_f=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_f;Testing_c[Testing_g]=Testing_f[Testing_a[4]];elseif Testing_g>313 then local Testing_h;local Testing_g;Testing_c[Testing_a[2]]();Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]]-Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]]/Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e[Testing_a[3]]=Testing_c[Testing_a[2]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e[Testing_a[3]]=Testing_c[Testing_a[2]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]={};Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]]*Testing_a[4];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]]+Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_a[3]]=Testing_c[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e[Testing_a[3]]=Testing_c[Testing_a[2]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g](Testing_c[Testing_g+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=(Testing_a[3]~=0);Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_a[3]]=Testing_a[4];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];else local Testing_f;Testing_f=Testing_a[2]Testing_c[Testing_f](Testing_c[Testing_f+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2]Testing_c[Testing_f](Testing_c[Testing_f+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];end;elseif Testing_g<=316 then if Testing_g>315 then Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]]-Testing_c[Testing_a[4]];else local Testing_g;local Testing_i;local Testing_k,Testing_m;local Testing_l;local Testing_g;Testing_c[Testing_a[2]]();Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_l=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_l;Testing_c[Testing_g]=Testing_l[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_k,Testing_m=Testing_j(Testing_c[Testing_g](Testing_c[Testing_g+1]))Testing_h=Testing_m+Testing_g-1 Testing_i=0;for Testing_a=Testing_g,Testing_h do Testing_i=Testing_i+1;Testing_c[Testing_a]=Testing_k[Testing_i];end;Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_k={Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_h))};Testing_i=0;for Testing_a=Testing_g,Testing_a[4]do Testing_i=Testing_i+1;Testing_c[Testing_a]=Testing_k[Testing_i];end Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_b=Testing_a[3];end;elseif Testing_g<=317 then local Testing_h;local Testing_g;Testing_g=Testing_a[2];Testing_h=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_h;Testing_c[Testing_g]=Testing_h[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];if(Testing_c[Testing_a[2]]~=Testing_a[4])then Testing_b=Testing_b+1;else Testing_b=Testing_a[3];end;elseif Testing_g>318 then local Testing_g;local Testing_e;Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];else Testing_c[Testing_a[2]][Testing_c[Testing_a[3]]]=Testing_c[Testing_a[4]];end;elseif Testing_g<=324 then if Testing_g<=321 then if Testing_g>320 then local Testing_g;local Testing_e;Testing_c[Testing_a[2]]={};Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_a[3]]=Testing_a[4];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_a[3]]=Testing_a[4];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e]=Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];else local Testing_g;local Testing_e;Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_b=Testing_a[3];end;elseif Testing_g<=322 then local Testing_g;local Testing_f;Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]][Testing_a[3]]=Testing_a[4];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_f+1]=Testing_g;Testing_c[Testing_f]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2]Testing_c[Testing_f](Testing_c[Testing_f+1])elseif Testing_g>323 then local Testing_g;local Testing_f;Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_f+1]=Testing_g;Testing_c[Testing_f]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2]Testing_c[Testing_f](Testing_c[Testing_f+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_i[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_f+1]=Testing_g;Testing_c[Testing_f]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2]Testing_c[Testing_f](Testing_c[Testing_f+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_f+1]=Testing_g;Testing_c[Testing_f]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_f=Testing_a[2]Testing_c[Testing_f](Testing_c[Testing_f+1])Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];do return end;else if(Testing_c[Testing_a[2]]<=Testing_a[4])then Testing_b=Testing_a[3];else Testing_b=Testing_b+1;end;end;elseif Testing_g<=327 then if Testing_g<=325 then Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];elseif Testing_g==326 then local Testing_f;local Testing_g;Testing_c[Testing_a[2]]=Testing_i[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_f=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_f;Testing_c[Testing_g]=Testing_f[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];else local Testing_k;local Testing_l,Testing_m;local Testing_i;local Testing_g;Testing_c[Testing_a[2]]=Testing_e[Testing_a[3]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_i=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_i;Testing_c[Testing_g]=Testing_i[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g]=Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2];Testing_i=Testing_c[Testing_a[3]];Testing_c[Testing_g+1]=Testing_i;Testing_c[Testing_g]=Testing_i[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_l,Testing_m=Testing_j(Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_a[3])))Testing_h=Testing_m+Testing_g-1 Testing_k=0;for Testing_a=Testing_g,Testing_h do Testing_k=Testing_k+1;Testing_c[Testing_a]=Testing_l[Testing_k];end;Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_g=Testing_a[2]Testing_c[Testing_g](Testing_f(Testing_c,Testing_g+1,Testing_h))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];do return end;end;elseif Testing_g<=328 then local Testing_g;local Testing_e;Testing_e=Testing_a[2]Testing_c[Testing_e]=Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e]=Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2]Testing_c[Testing_e](Testing_f(Testing_c,Testing_e+1,Testing_a[3]))Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_g=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_g;Testing_c[Testing_e]=Testing_g[Testing_a[4]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];elseif Testing_g>329 then local Testing_f;local Testing_e;Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_a[3];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_c[Testing_a[2]]=Testing_c[Testing_a[3]][Testing_c[Testing_a[4]]];Testing_b=Testing_b+1;Testing_a=Testing_d[Testing_b];Testing_e=Testing_a[2];Testing_f=Testing_c[Testing_a[3]];Testing_c[Testing_e+1]=Testing_f;Testing_c[Testing_e]=Testing_f[Testing_a[4]];else local Testing_b=Testing_a[2];do return Testing_c[Testing_b](Testing_f(Testing_c,Testing_b+1,Testing_a[3]))end;end;Testing_b=Testing_b+1;end;end);end;return Testing_l(true,{},Testing_s())();end)(string.byte,table.insert,setmetatable);
